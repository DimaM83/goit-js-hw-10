{"version":3,"file":"commonHelpers.js","sources":["../src/js/exports_for_timer/flatpickr.js","../src/js/exports_for_timer/refs.js","../src/js/exports_for_timer/timer.js","../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nexport function initializeDateTimePicker(selector, options, onCloseCallback) {\n  return flatpickr(selector, {\n    ...options,\n    onClose: onCloseCallback,\n  });\n}\n","const selectors = {\n  dateTimePickerRef: document.getElementById('datetime-picker'),\n  startBtnRef: document.querySelector('[data-start]'),\n  daysRef: document.querySelector('[data-days]'),\n  hoursRef: document.querySelector('[data-hours]'),\n  minutesRef: document.querySelector('[data-minutes]'),\n  secondsRef: document.querySelector('[data-seconds]'),\n};\n\nexport { selectors };\n","import { selectors } from './refs';\n\nexport let countdownInterval;\n\nexport function startTimer(updateCallback) {\n  clearInterval(countdownInterval);\n  updateTimer(updateCallback);\n  countdownInterval = setInterval(() => updateTimer(updateCallback), 1000);\n}\n\nexport function updateTimer(updateCallback) {\n  const currentDate = new Date();\n  const targetDate = new Date(selectors.dateTimePickerRef.value);\n\n  const timeDifference = targetDate - currentDate;\n\n  if (timeDifference <= 0) {\n    clearInterval(countdownInterval);\n    resetTimerDisplay();\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(timeDifference);\n\n  updateCallback({ days, hours, minutes, seconds });\n}\n\nexport function resetTimerDisplay() {\n  selectors.daysRef.textContent = '00';\n  selectors.hoursRef.textContent = '00';\n  selectors.minutesRef.textContent = '00';\n  selectors.secondsRef.textContent = '00';\n}\n\nexport function addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nexport function convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n","// import { initializeDateTimePicker } from './exports_for_timer/flatpickr';\n// import iziToast from 'izitoast';\n// import * as timer from './exports_for_timer/timer';\n// import { selectors } from './exports_for_timer/refs';\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n// };\n\n// const onCloseCallback = selectedDates => {\n//   const selectedDate = selectedDates[0];\n\n//   if (selectedDate < new Date()) {\n//     iziToast.error({\n//       title: 'Error',\n//       message: `❌ Please choose a date in the future`,\n//     });\n//     timer.resetTimerDisplay();\n//     selectors.startBtnRef.disabled = true;\n//   } else {\n//     iziToast.success({\n//       title: 'Success',\n//       message: `✅ You selected a valid future date`,\n//     });\n//     selectors.startBtnRef.disabled = false;\n\n//     localStorage.setItem('selectedDate', selectedDate.toISOString());\n//   }\n// };\n\n// initializeDateTimePicker('#datetime-picker', options, selectedDates =>\n//   onCloseCallback(\n//     selectedDates,\n//     options.defaultDate.getTime() - new Date().getTime()\n//   )\n// );\n\n// window.addEventListener('load', () => {\n//   const savedSelectedDate = localStorage.getItem('selectedDate');\n\n//   if (savedSelectedDate) {\n//     options.defaultDate = new Date(savedSelectedDate);\n//   }\n\n//   initializeDateTimePicker('#datetime-picker', options, onCloseCallback);\n\n//   selectors.startBtnRef.disabled = true;\n\n//   selectors.startBtnRef.addEventListener('click', () => {\n//     timer.startTimer(updateTimerDisplay);\n//   });\n\n//   const currentDate = new Date();\n//   const selectedDate = new Date(savedSelectedDate);\n\n//   if (selectedDate > currentDate) {\n//     timer.startTimer(updateTimerDisplay);\n//   }\n// });\n\n// function updateTimerDisplay({ days, hours, minutes, seconds }) {\n//   selectors.daysRef.textContent = timer.addLeadingZero(days);\n//   selectors.hoursRef.textContent = timer.addLeadingZero(hours);\n//   selectors.minutesRef.textContent = timer.addLeadingZero(minutes);\n//   selectors.secondsRef.textContent = timer.addLeadingZero(seconds);\n// }\n\nimport { initializeDateTimePicker } from './exports_for_timer/flatpickr';\nimport iziToast from 'izitoast';\nimport * as timer from './exports_for_timer/timer';\nimport { selectors } from './exports_for_timer/refs';\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n};\n\niziToast.settings({\n  position: 'topRight',\n});\n\nconst onCloseCallback = selectedDates => {\n  const selectedDate = selectedDates[0];\n\n  if (selectedDate < new Date()) {\n    iziToast.error({\n      title: 'Error',\n      message: `❌ Please choose a date in the future`,\n    });\n    timer.resetTimerDisplay();\n    selectors.startBtnRef.disabled = true;\n  } else {\n    iziToast.success({\n      title: 'Success',\n      message: `✅ You selected a valid future date`,\n    });\n    selectors.startBtnRef.disabled = false;\n\n    localStorage.setItem('selectedDate', selectedDate.toISOString());\n  }\n};\n\ninitializeDateTimePicker('#datetime-picker', options, selectedDates =>\n  onCloseCallback(\n    selectedDates,\n    options.defaultDate.getTime() - new Date().getTime()\n  )\n);\n\nwindow.addEventListener('load', () => {\n  const savedSelectedDate = localStorage.getItem('selectedDate');\n\n  if (savedSelectedDate) {\n    options.defaultDate = new Date(savedSelectedDate);\n  }\n\n  initializeDateTimePicker('#datetime-picker', options, onCloseCallback);\n\n  selectors.startBtnRef.disabled = true;\n\n  selectors.startBtnRef.addEventListener('click', () => {\n    timer.startTimer(updateTimerDisplay);\n  });\n\n  const currentDate = new Date();\n  const selectedDate = new Date(savedSelectedDate);\n\n  if (selectedDate > currentDate) {\n    timer.startTimer(updateTimerDisplay);\n  }\n});\n\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n  selectors.daysRef.textContent = timer.addLeadingZero(days);\n  selectors.hoursRef.textContent = timer.addLeadingZero(hours);\n  selectors.minutesRef.textContent = timer.addLeadingZero(minutes);\n  selectors.secondsRef.textContent = timer.addLeadingZero(seconds);\n}\n"],"names":["initializeDateTimePicker","selector","options","onCloseCallback","flatpickr","selectors","countdownInterval","startTimer","updateCallback","updateTimer","currentDate","timeDifference","resetTimerDisplay","days","hours","minutes","seconds","convertMs","addLeadingZero","value","ms","iziToast","selectedDates","selectedDate","timer.resetTimerDisplay","savedSelectedDate","timer.startTimer","updateTimerDisplay","timer.addLeadingZero"],"mappings":"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"}